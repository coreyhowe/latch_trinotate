#"""
#
#"""

import subprocess
from pathlib import Path
import os

from latch import small_task, medium_task, large_task, large_gpu_task, workflow
from latch.types import LatchFile, LatchDir


@large_gpu_task
def trinotate_task(
	fasta: LatchFile, 
	pep: LatchFile, 
	map: LatchFile,
	output_dir: LatchDir
	) -> LatchFile:
	
	
	out_basename = str(output_dir.remote_path)
	fasta_basename = str(os.path.basename(fasta.local_path))
	report = Path(f"{fasta_basename}.Trinotate_annotation_report.xlsx").resolve()
	
	

	#commands
	_db_cmd = [
        "Build_Trinotate_Boilerplate_SQLite_db.pl",
        "Trinotate"]
		
	_makedb_cmd = [
        "makeblastdb",
        "-in",
        "uniprot_sprot.pep",
        "-dbtype",
        "prot"]
		
	_uncompress_cmd = [
        "gunzip",
        "Pfam-A.hmm.gz"]
		
	_prepare_cmd = [
        "hmmpress",
        "Pfam-A.hmm"]	
	
	_blastx_cmd = [
        "blastx",
        "-query",
        fasta.local_path,
        "-db",
        "uniprot_sprot.pep",
        "-outfmt",
        "6", 
        "-evalue",
        "1e-3", 
        "-out", 
        "blastx.outfmt6"
        ]
		
	_blastp_cmd = [
        "blastp",
        "-query",
        pep.local_path,
        "-db",
        "uniprot_sprot.pep",
        "-outfmt",
        "6", 
        "-evalue",
        "1e-3", 
        "-out", 
        "blastp.outfmt6"]
		
	_hmmscan_cmd = [
        "hmmscan",
        "--domtblout",
        "TrinotatePFAM.out", 
        "-o",
        "pfam.log",
        "Pfam-A.hmm",
        pep.local_path]
		
	_sql_cmd = [
        "Trinotate",
        "Trinotate.sqlite",
        "init",
        "--gene_trans_map",
        map.local_path,
        "--transcript_fasta", 
        fasta.local_path, 
        "--transdecoder_pep", 
        pep.local_path]
		
		#use this format Trinotate Trinotate.sqlite init --gene_trans_map Trinity.fasta.gene_trans_map --transcript_fasta Trinity.fasta --transdecoder_pep transdecoder.pep
		
	_blastpsql_cmd = [
        "Trinotate",
        "Trinotate.sqlite",
        "LOAD_swissprot_blastp",
        "blastp.outfmt6"]	
		
	_blastxsql_cmd = [
        "Trinotate", 
        "Trinotate.sqlite",
        "LOAD_swissprot_blastx",
        "blastx.outfmt6"	
		]		

	_pfamsql_cmd = [
        "Trinotate", 
        "Trinotate.sqlite",
        "LOAD_pfam", 
        "TrinotatePFAM.out"	
		]	
		
	_output_cmd = [
        "Trinotate", 
        "Trinotate.sqlite",
        "report",
        "--incl_pep",
        "--incl_trans", 
        ">",
        "trinotate_annotation_report.xls"
		]	

	subprocess.run(_db_cmd)
	subprocess.run(_makedb_cmd)
	subprocess.run(_uncompress_cmd)
	subprocess.run(_prepare_cmd)
	subprocess.run(_blastx_cmd)
	subprocess.run(_blastp_cmd)
	subprocess.run(_hmmscan_cmd)
	subprocess.run(_sql_cmd)
	subprocess.run(_blastpsql_cmd) 
	subprocess.run(_blastxsql_cmd)
	subprocess.run(_pfamsql_cmd)
	subprocess.run(_output_cmd)

	#return LatchDir("/root", output_dir.remote_path)
	return LatchFile("/root/trinotate_annotation_report.xls", f"{out_basename}/{fasta_basename}.trinotate_annotation_report.xls")
	
	
@workflow
def trinotate(fasta: LatchFile, 
	pep: LatchFile, 
	map: LatchFile, output_dir: LatchDir) -> LatchFile:
	
	"""
	
#Trinotate: Transcriptome Functional Annotation

Trinotate is a comprehensive annotation suite designed for 
automatic functional annotation of transcriptomes, particularly 
de novo assembled transcriptomes, from model or non-model organisms. 
Trinotate makes use of a number of different well referenced methods 
for functional annotation including homology search to known sequence 
data (BLAST+/SwissProt), protein domain identification (HMMER/PFAM), 
protein signal peptide and transmembrane domain prediction (signalP/tmHMM), 
and leveraging various annotation databases (eggNOG/GO/Kegg databases). 
All functional annotation data derived from the analysis of transcripts 
is integrated into a SQLite database which allows fast efficient searching 
for terms with specific qualities related to a desired scientific hypothesis 
or a means to create a whole annotation report for a transcriptome.

More info [here](https://github.com/Trinotate/Trinotate.github.io/wiki)

__metadata__:
        display_name: Annotate  transcript fasta files
        author:
            name: Corey Howe
            email: 	
            github: https://github.com/coreyhowe
        repository: https://github.com/coreyhowe/latch_trinotate
        license:
            id: MIT
            
            
Args:
	
	fasta:
	  fasta file of assembled transcripts
  
	  __metadata__:
		display_name: Transcript Fasta File
	
	pep:
	  fasta file of predicted peptides, generated by Transdecoder
  
	  __metadata__:
		display_name: Peptide Fasta File
	
	map:
	  Text file with gene and transcript pairs, generated by Trinity
  
	  __metadata__:
		display_name: Gene to transcript map 
	
	output_dir:
	  Paired-end read 1 file to be assembled.
  
	  __metadata__:
		display_name: Output Directory 
	
    """
    
	return trinotate_task(
		output_dir=output_dir,
		fasta=fasta,
		pep=pep,
		map=map)